type Body = record { response : text };
type Envs = record {
  external_service_url : text;
  wizard_details_canister_id : text;
  vectordb_canister_id : text;
};
type Error = variant {
  CantParseHost;
  BodyNonSerializable;
  ParseError;
  HttpError : text;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Response = record { body : Body; statusCode : nat16 };
type Result = variant { Ok : Response; Err : Error };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : (Envs) -> {
  chat : (text, text, vec float32, text) -> (Result);
  get_all_envs : () -> (Envs) query;
  transform : (TransformArgs) -> (HttpResponse) query;
}
